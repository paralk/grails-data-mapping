h4. Cassandra Database Connection Configuration

As mentioned the GORM for Cassandra plugin will configure all the defaults for you, but if you wish to customize those defaults you can do so in the @grails-app/conf/DataSource.groovy@ file:

{code}
grails {
    cassandra {
        contactPoints = "localhost"
        port = 9042
        schemaAction = "recreate-drop-unused"
        keyspace {
            name = "foo" 
            action = "create"
        }
    }
}
{code}

The @keyspace name@ property configures the default keyspace to use. If it's not specified the @keyspace@ used will default to the name of your application.

In production scenarios you will typically use more than one Cassandra node:

{code}
grails {
    cassandra {
        contactPoints = "192.168.0.1, 192.168.0.2" //comma-separated list of hostnames or IP addresses of nodes to connect to
    }
}
{code}

h4. Keyspace creation

If you want the plugin to automatically create the application's keyspace you can specify a value for the @keyspace action@ property:

{code}
grails {
    cassandra {
        keyspace {
            name = "foo" 
            action = "create"
        }
    }
}
{code}

Valid options for @action@ are:

* *create* - Create the keyspace if it doesn't exist
* *create-drop* - Drop the keyspace and create it if doesn't exist

h4. Schema creation

The plugin can automatically create the Cassandra tables and indexes required for your domain model. You have some control over when and how it does this through the @dbCreate@ property, which can take these values: 

* *none* - The default. Do not create any schema objects.
* *create* - Create a table and indexes for each domain class on startup. Fail if a table already exists.
* *recreate* - Create a table and indexes for each domain class on startup, dropping the table first if it exists.
* *recreate-drop-unused* - Drop *all* tables in the keyspace, then create a table and indexes for each domain class on startup.
* update - TO IMPLEMENT

Example:
{code}
grails {
    cassandra {
        dbCreate = "recreate-drop-unused"
    }
}
{code}

You can remove the dbCreate property completely, which is recommended once your schema is relatively stable and definitely when your application and database are deployed in production.

h4. Configuration Options Guide

Below is a complete example showing all configuration options, including [keyspace options|http://www.datastax.com/documentation/cql/3.1/cql/cql_reference/create_keyspace_r.html]:

{code}
grails {
    cassandra {
    	contactPoints = "localhost" //comma-separated list of hostnames or IP addresses of nodes to connect to
        port = 9042 //the port to connect to
        dbCreate = "recreate" //the strategy to create cassandra tables and indexes for domain classes, default: "none"     
        stateless = false // whether to use stateless sessions by default

        keyspace {
            name = "foo" //the name of the keyspace to use, default: the name of the application
            action = "create" //whether to create a keyspace, default: no keyspace created      
            
            //keyspace properties to set only if the plugin is to create the keyspace         			
            durableWrites = false //default: false                        
            replicationStrategy = "SimpleStrategy" OR "NetworkTopologyStrategy" //default: "SimpleStrategy"             
            replicationFactor = 1 //default: 1                        
            dataCenter = ["us-west":1, "eu-west":2] //if replicationStrategy is "NetworkTopologyStrategy",
                                                    //a map of data centre names and replication factors
        }
    }
}
{code}


h4. Global Mapping Configuration

Using the @grails.cassandra.default.mapping@ setting in @Config.groovy@ you can configure global mapping options across your domain classes. 
The following configuration will disable optimistic locking globally:

{code}
grails.cassandra.default.mapping = {
    version false    
}
{code}
