h4. Limiting results
Using the @max@ parameter, you can specify that the query return a limited number of rows. Example:
{code}
def people = Person.list(max:2)
{code}

Note that Cassandra does not support the @offset@ parameter, so you cannot page results this way.

h4. Fetch Size
Setting the [fetch size|http://www.datastax.com/documentation/developer/java-driver/2.0/java-driver/reference/queryBuilderOverview.html?scroll=queryBuilderOverview__setting-query-options-querybuilder-api], or number of rows returned simultaneously by a select query, is typically needed when queries return extremely large numbers of rows. 
To do this you can use the @fetchSize@ argument:

{code}
def people = Person.list([fetchSize: 200])
people = Person.findAllByFirstName("Barney", [fetchSize: 200])
{code}

Setting the fetch size to small values is discouraged as it will yield very poor performance. 

In some cases you may want or have to disable paging entirely, for example when using order by and IN, in which case set the @fetchSize@ to Integer.MAX_VALUE. Example:

{code}
People.createCriteria().list {
    'in' "lastName", ["Flintstone", "Rubble"]
    order "name"
    fetchSize Integer.MAX_VALUE
}
{code}

h4. Allow filtering
When you attempt a potentially expensive query Cassandra may throw an exception mentioning [ALLOW FILTERING|http://www.datastax.com/documentation/cql/3.1/cql/cql_reference/select_r.html?scroll=reference_ds_d35_v2q_xj__selAllFltr].
To run the query, you can use the @allowFiltering@ argument which is passed onto Cassandra. Imposing a limit using the @max@ parameter is recommended to reduce memory used. 

Example:
{code}
def people = Person.findAllByFirstNameAndAgeLessThanEquals('Barney', 35, [allowFiltering:true, max:5])
def person = Person.findOrSaveWhere(firstName: 'Rubble', age: 35, [allowFiltering:true, flush:true])
def criteria = Person.createCriteria()  
people = criteria.list (allowFiltering:true, max:5) {
            and {
                eq('firstName', 'Fred')
                eq('age', 40)
            }
         }  
people = criteria.list {
            projections {
                eq('firstName', 'Bob')
                between("age", 40, 43)                   
            }
            allowFiltering true
            max 5    
         }     
{code}